Feature: convert package.xml to information files
  In order to use pickle on my package
  As an extension developer
  I should be able to create information files from my package.xml

  Background:                              # features/pickle/convert-info.feature:6
    Given a file named "package.xml" with: # FeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <description>This is a dummy package description</description>
          <license uri="http://www.php.net/license">PHP License</license>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
          <lead>
              <name>Rasmus Lerdorf</name>
              <user>rasmus</user>
              <email>rasmus@php.net</email>
              <active>yes</active>
          </lead>
          <developer>
              <name>Ilia Alshanetsky</name>
              <user>iliaa</user>
              <email>ilia@prohost.org</email>
              <active>no</active>
          </developer>
      </package>
      """
    And a file named "config.m4" with:     # FeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # FeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Create information files              # features/pickle/convert-info.feature:49
    When I run "pickle convert"                   # FeatureContext::iRunPickle()
    Then it should pass with:                     # FeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "composer.json" JSON file should contain: # FeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package",
          "license": [
              "PHP License"
          ],
          "authors": [
              {
                  "name": "Rasmus Lerdorf",
                  "email": "rasmus@php.net"
              },
              {
                  "name": "Ilia Alshanetsky",
                  "email": "ilia@prohost.org"
              }
          ]
      }
      """

Feature: convert package.xml to composer.json
  In order to use pickle on my package
  As an extension developer
  I should be able to create composer.json from my package.xml

  Background:                              # features/pickle/convert-json.feature:6
    Given a file named "package.xml" with: # FeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
      </package>
      """
    And a file named "config.m4" with:     # FeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # FeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Search package.xml in CWD             # features/pickle/convert-json.feature:35
    When I run "pickle convert"                   # FeatureContext::iRunPickle()
    Then it should pass with:                     # FeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "composer.json" JSON file should contain: # FeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package"
      }
      """

  Scenario: Search package.xml in the given path     # features/pickle/convert-json.feature:56
    Given I am in the "empty-dir" path               # FeatureContext::iAmInThePath()
    When I run "pickle convert ../"                  # FeatureContext::iRunPickle()
    Then it should pass with:                        # FeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "../composer.json" JSON file should contain: # FeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package"
      }
      """

  Scenario: Error if package.xml does not exist # features/pickle/convert-json.feature:78
    Given I am in the "empty-dir" path          # FeatureContext::iAmInThePath()
    When I run "pickle convert"                 # FeatureContext::iRunPickle()
    Then it should fail with:                   # FeatureContext::itShouldPassWith()
      """
      The path '%%TEST_DIR%%/empty-dir' doesn't contain package.xml
      """
      string(167) 'In PackageXml.php line 62:
      
        The path '/tmp/pickle/pickle5ece08160d70a8.14276450/empty-dir' doesn't cont
        ain package.xml
      
      
      convert [--tmp-dir TMP-DIR] [--] [<path>]' does not contain The path '/tmp/pickle/pickle5ece08160d70a8.14276450/empty-dir' doesn't contain package.xml (mageekguy\atoum\asserter\exception)
    Given I am in the ".." path                 # FeatureContext::iAmInThePath()
    When I run "pickle convert empty-dir"       # FeatureContext::iRunPickle()
    Then it should fail with:                   # FeatureContext::itShouldPassWith()
      """
      The path 'empty-dir' doesn't contain package.xml
      """

Feature: Install pickle package
  In order to use pickle on my package
  As an extension developer
  I should be able to install my extension from composer.json

  Background:                                # features/pickle/install.feature:6
    Given a file named "composer.json" with: # FeatureContext::aFileNamedWith()
      """
      {
          "name": "dummy",
          "description": "This is a dummy package",
          "version": "1.0.0",
          "type": "extension",
          "extra": {
              "configure-options": {
                  "enable-dummy": {
                      "default": "no",
                      "prompt": "Enable dummy support"
                  }
              }
          }
      }
      """
    And a file named "config.m4" with:       # FeatureContext::aFileNamedWith()
      """
      PHP_ARG_ENABLE(dummy, whether to enable dummy support,
      [  --enable-dummy           Enable dummy support])
      """
    And a file named "dummy.h" with:         # FeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "1.0.0"
      """

  Scenario: Install from CWD              # features/pickle/install.feature:34
    When I run "pickle install --dry-run" # FeatureContext::iRunPickle()
    Then it should pass                   # FeatureContext::itShouldFail()

Feature: validate package.xml
  In order to use pickle on my package
  As an extension developer
  I should be able to validate my package.xml

  Background:                              # features/pickle/validate.feature:6
    Given a file named "package.xml" with: # FeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
      </package>
      """
    And a file named "config.m4" with:     # FeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # FeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Search package.xml in CWD # features/pickle/validate.feature:35
    When I run "pickle validate"      # FeatureContext::iRunPickle()
    Then it should pass with:         # FeatureContext::itShouldPassWith()
      """
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      This is a dummy package
      """

  Scenario: Search package.xml in the given path # features/pickle/validate.feature:47
    Given I am in the "empty-dir" path           # FeatureContext::iAmInThePath()
    When I run "pickle validate ../"             # FeatureContext::iRunPickle()
    Then it should pass with:                    # FeatureContext::itShouldPassWith()
      """
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      This is a dummy package
      """

  Scenario: Error if package.xml does not exist # features/pickle/validate.feature:60
    Given I am in the "empty-dir" path          # FeatureContext::iAmInThePath()
    When I run "pickle validate"                # FeatureContext::iRunPickle()
    Then it should fail with:                   # FeatureContext::itShouldPassWith()
      """
      The path '%%TEST_DIR%%/empty-dir' doesn't contain package.xml
      """
      string(168) 'In PackageXml.php line 62:
      
        The path '/tmp/pickle/pickle5ece08166294a1.28687446/empty-dir' doesn't cont
        ain package.xml
      
      
      validate [--tmp-dir TMP-DIR] [--] [<path>]' does not contain The path '/tmp/pickle/pickle5ece08166294a1.28687446/empty-dir' doesn't contain package.xml (mageekguy\atoum\asserter\exception)
    Given I am in the ".." path                 # FeatureContext::iAmInThePath()
    When I run "pickle validate empty-dir"      # FeatureContext::iRunPickle()
    Then it should fail with:                   # FeatureContext::itShouldPassWith()
      """
      The path 'empty-dir' doesn't contain package.xml
      """

Feature: convert PECL extensions
  In order to use pickle on PECL extensions
  As a pickle user
  I should be able to convert PECL extensions to pickle packages

  Scenario Outline: Convert downloaded extensions     # features/pecl/convert-extensions.feature:6
    Given "<extension>" <version> extension exists    # FeatureContext::extensionExists()
    When I run "pickle convert <extension>-<version>" # FeatureContext::iRunPickle()
    Then it should pass with:                         # FeatureContext::itShouldPassWith()
      """
      Successfully converted <extension>
      """
    And the output should contain:                    # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """
    And the output should contain:                    # FeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | version  |
      | APC       | 3.1.13   |
      | apcu      | 4.0.6    |
      | mongo     | 1.5.4    |
      | memcache  | 3.0.8    |
      | imagick   | 3.2.0RC1 |
      | amqp      | 1.4.0    |
      | redis     | 2.2.5    |

Feature: download and install extensions from git repository
  In order to install extensions
  As a pickle user
  I should be able to download and install extensions from git repositories

  Scenario Outline: Install extensions from git  # features/pecl/git-extension.feature:6
    Given I run "pickle install <url> --dry-run" # FeatureContext::iRunPickle()
    Then it should pass                          # FeatureContext::itShouldFail()
    And the output should contain:               # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (master)
      """
    And the output should contain:               # FeatureContext::theOutputShouldContain()
      """
      Cloning master
      """
    And the output should contain:               # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension |
      | git://github.com/beberlei/env.git   | env       |
      | https://github.com/beberlei/env.git | env       |
        │ Actual output:
        │ 
        │ - Installing env (master): PHP Notice:  Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1326
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Install extensions from git with version constraint # features/pecl/git-extension.feature:27
    Given I run "pickle install <url>#<version> --dry-run"              # FeatureContext::iRunPickle()
    Then it should pass                                                 # FeatureContext::itShouldFail()
    And the output should contain:                                      # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                      # FeatureContext::theOutputShouldContain()
      """
      Cloning <version>
      """
    And the output should contain:                                      # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension | version |
      | git://github.com/beberlei/env.git   | env       | master  |
      | https://github.com/beberlei/env.git | env       | v0.2.1  |
        │ Actual output:
        │ 
        │ - Installing env (v0.2.1): PHP Notice:  Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1327
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Show info about downloaded extensions # features/pecl/git-extension.feature:48
    Given I run "pickle info <url>"                       # FeatureContext::iRunPickle()
    Then it should pass                                   # FeatureContext::itShouldFail()
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (master)
      """
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      Cloning master
      """
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension |
      | git://github.com/beberlei/env.git   | env       |
      | https://github.com/beberlei/env.git | env       |
        │ Actual output:
        │ 
        │ - Installing env (master): PHP Notice:  Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1327
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Show info about extensions with version constraint # features/pecl/git-extension.feature:69
    Given I run "pickle info <url>#<version>"                          # FeatureContext::iRunPickle()
    Then it should pass                                                # FeatureContext::itShouldFail()
    And the output should contain:                                     # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                     # FeatureContext::theOutputShouldContain()
      """
      Cloning <version>
      """
    And the output should contain:                                     # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension | version |
      | git://github.com/beberlei/env.git   | env       | master  |
      | https://github.com/beberlei/env.git | env       | v0.2.1  |
        │ Actual output:
        │ 
        │ - Installing env (v0.2.1): PHP Notice:  Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1327
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Downloader/VcsDownlo in /home/pierre/projects/php/pickle/pickle/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

Feature: download and install PECL extensions
  In order to install PECL extensions
  As a pickle user
  I should be able to download and install PECL extensions

  Scenario Outline: Show info about downloaded extensions # features/pecl/info-extensions.feature:6
    Given I run "pickle info <extension>@<version>"       # FeatureContext::iRunPickle()
    Then it should pass                                   # FeatureContext::itShouldFail()
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                        # FeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | pretty   | version |
      | apc       | APC      | 3.1.13  |
      | apcu      | apcu     | 4.0.6   |
      | mongo     | mongo    | 1.5.4   |
      | memcache  | memcache | 3.0.8   |
      | amqp      | amqp     | 1.4.0   |
      | redis     | redis    | 2.2.5   |

  Scenario: Show informations about a PECL extension's options # features/pecl/info-extensions.feature:31
    When I run "pickle info apc@3.1.13"                        # FeatureContext::iRunPickle()
    Then it should pass                                        # FeatureContext::itShouldFail()
    And the output should contain:                             # FeatureContext::theOutputShouldContain()
      """
      | enable | whether to enable APC support            | no      |
      """
    And the output should contain:                             # FeatureContext::theOutputShouldContain()
      """
      | enable | Disable pthread mutex locking            | yes     |
      """
    When I run "pickle info oci8@2.0.8"                        # FeatureContext::iRunPickle()
    Then it should pass                                        # FeatureContext::itShouldFail()
    And the output should contain:                             # FeatureContext::theOutputShouldContain()
      """
      | with | for Oracle Database OCI8 support |         |
      """

Feature: download and install PECL extensions
  In order to install PECL extensions
  As a pickle user
  I should be able to download and install PECL extensions

  Scenario Outline: Install extensions from PECL repository # features/pecl/install-extensions.feature:6
    Given I run "pickle install <extension> --dry-run"      # FeatureContext::iRunPickle()
    Then it should pass                                     # FeatureContext::itShouldFail()
    And the output should contain:                          # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (latest-stable)
      """
    And the output should contain:                          # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """

    Examples:
      | extension | pretty   |
      | apc       | APC      |
      | apcu      | apcu     |
      | mongo     | mongo    |
      | memcache  | memcache |
      | redis     | redis    |

  Scenario Outline: Install extensions from PECL repository with version constraint # features/pecl/install-extensions.feature:26
    Given I run "pickle install <extension>@<version> --dry-run"                    # FeatureContext::iRunPickle()
    Then it should pass                                                             # FeatureContext::itShouldFail()
    And the output should contain:                                                  # FeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                                  # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                                                  # FeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | pretty   | version |
      | apc       | APC      | 3.1.13  |
      | apcu      | apcu     | 4.0.6   |
      | mongo     | mongo    | 1.5.4   |
      | memcache  | memcache | 3.0.8   |
      | amqp      | amqp     | 1.4.0   |
      | redis     | redis    | 2.2.5   |

  Scenario Outline: Install extensions from PECL names and stability flag # features/pecl/install-extensions.feature:51
    Given I run "pickle install <extension>-<stability> --dry-run"        # FeatureContext::iRunPickle()
    Then it should pass                                                   # FeatureContext::itShouldFail()
    And the output should contain:                                        # FeatureContext::theOutputShouldContain()
      """
      - Installing <name> (latest-<stability>)
      """
    And the output should contain:                                        # FeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                                        # FeatureContext::theOutputShouldContain()
      """
      Package status                    | <stability>
      """

    Examples:
      | extension     | name     | pretty   | stability |
      | pecl/apc      | apc      | APC      | stable    |
      | apcu          | apcu     | apcu     | beta      |
      | pecl/memcache | memcache | memcache | beta      |

Feature: convert package.xml to information files
  In order to use pickle on my package
  As an extension developer
  I should be able to create information files from my package.xml

  Background:                              # features/pickle/convert-info.feature:6
    Given a file named "package.xml" with: # PharFeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <description>This is a dummy package description</description>
          <license uri="http://www.php.net/license">PHP License</license>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
          <lead>
              <name>Rasmus Lerdorf</name>
              <user>rasmus</user>
              <email>rasmus@php.net</email>
              <active>yes</active>
          </lead>
          <developer>
              <name>Ilia Alshanetsky</name>
              <user>iliaa</user>
              <email>ilia@prohost.org</email>
              <active>no</active>
          </developer>
      </package>
      """
    And a file named "config.m4" with:     # PharFeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # PharFeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Create information files              # features/pickle/convert-info.feature:49
    When I run "pickle convert"                   # PharFeatureContext::iRunPickle()
    Then it should pass with:                     # PharFeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "composer.json" JSON file should contain: # PharFeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package",
          "license": [
              "PHP License"
          ],
          "authors": [
              {
                  "name": "Rasmus Lerdorf",
                  "email": "rasmus@php.net"
              },
              {
                  "name": "Ilia Alshanetsky",
                  "email": "ilia@prohost.org"
              }
          ]
      }
      """

Feature: convert package.xml to composer.json
  In order to use pickle on my package
  As an extension developer
  I should be able to create composer.json from my package.xml

  Background:                              # features/pickle/convert-json.feature:6
    Given a file named "package.xml" with: # PharFeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
      </package>
      """
    And a file named "config.m4" with:     # PharFeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # PharFeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Search package.xml in CWD             # features/pickle/convert-json.feature:35
    When I run "pickle convert"                   # PharFeatureContext::iRunPickle()
    Then it should pass with:                     # PharFeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "composer.json" JSON file should contain: # PharFeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package"
      }
      """

  Scenario: Search package.xml in the given path     # features/pickle/convert-json.feature:56
    Given I am in the "empty-dir" path               # PharFeatureContext::iAmInThePath()
    When I run "pickle convert ../"                  # PharFeatureContext::iRunPickle()
    Then it should pass with:                        # PharFeatureContext::itShouldPassWith()
      """
      Successfully converted dummy
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      """
    And "../composer.json" JSON file should contain: # PharFeatureContext::JsonfileShouldContain()
      """
      {
          "name": "dummy",
          "type": "extension",
          "version": "3.1.15-beta",
          "description": "This is a dummy package"
      }
      """

  Scenario: Error if package.xml does not exist # features/pickle/convert-json.feature:78
    Given I am in the "empty-dir" path          # PharFeatureContext::iAmInThePath()
    When I run "pickle convert"                 # PharFeatureContext::iRunPickle()
    Then it should fail with:                   # PharFeatureContext::itShouldPassWith()
      """
      The path '%%TEST_DIR%%/empty-dir' doesn't contain package.xml
      """
      string(167) 'In PackageXml.php line 62:
      
        The path '/tmp/pickle/pickle5ece087dd71a11.17303167/empty-dir' doesn't cont
        ain package.xml
      
      
      convert [--tmp-dir TMP-DIR] [--] [<path>]' does not contain The path '/tmp/pickle/pickle5ece087dd71a11.17303167/empty-dir' doesn't contain package.xml (mageekguy\atoum\asserter\exception)
    Given I am in the ".." path                 # PharFeatureContext::iAmInThePath()
    When I run "pickle convert empty-dir"       # PharFeatureContext::iRunPickle()
    Then it should fail with:                   # PharFeatureContext::itShouldPassWith()
      """
      The path 'empty-dir' doesn't contain package.xml
      """

Feature: Install pickle package
  In order to use pickle on my package
  As an extension developer
  I should be able to install my extension from composer.json

  Background:                                # features/pickle/install.feature:6
    Given a file named "composer.json" with: # PharFeatureContext::aFileNamedWith()
      """
      {
          "name": "dummy",
          "description": "This is a dummy package",
          "version": "1.0.0",
          "type": "extension",
          "extra": {
              "configure-options": {
                  "enable-dummy": {
                      "default": "no",
                      "prompt": "Enable dummy support"
                  }
              }
          }
      }
      """
    And a file named "config.m4" with:       # PharFeatureContext::aFileNamedWith()
      """
      PHP_ARG_ENABLE(dummy, whether to enable dummy support,
      [  --enable-dummy           Enable dummy support])
      """
    And a file named "dummy.h" with:         # PharFeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "1.0.0"
      """

  Scenario: Install from CWD              # features/pickle/install.feature:34
    When I run "pickle install --dry-run" # PharFeatureContext::iRunPickle()
    Then it should pass                   # PharFeatureContext::itShouldFail()

Feature: validate package.xml
  In order to use pickle on my package
  As an extension developer
  I should be able to validate my package.xml

  Background:                              # features/pickle/validate.feature:6
    Given a file named "package.xml" with: # PharFeatureContext::aFileNamedWith()
      """
      <?xml version="1.0" encoding="UTF-8"?>
      <package packagerversion="1.4.7" version="2.0">
          <name>dummy</name>
          <providesextension>dummy</providesextension>
          <summary>This is a dummy package</summary>
          <version>
              <release>3.1.15</release>
              <api>3.1.0</api>
          </version>
          <stability>
              <release>beta</release>
              <api>stable</api>
          </stability>
          <date>2013-??-??</date>
          <notes>This is a note</notes>
          <changelog></changelog>
      </package>
      """
    And a file named "config.m4" with:     # PharFeatureContext::aFileNamedWith()
      """
      
      """
    And a file named "dummy.h" with:       # PharFeatureContext::aFileNamedWith()
      """
      #define PHP_DUMMY_VERSION "3.1.15"
      """

  Scenario: Search package.xml in CWD # features/pickle/validate.feature:35
    When I run "pickle validate"      # PharFeatureContext::iRunPickle()
    Then it should pass with:         # PharFeatureContext::itShouldPassWith()
      """
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      This is a dummy package
      """

  Scenario: Search package.xml in the given path # features/pickle/validate.feature:47
    Given I am in the "empty-dir" path           # PharFeatureContext::iAmInThePath()
    When I run "pickle validate ../"             # PharFeatureContext::iRunPickle()
    Then it should pass with:                    # PharFeatureContext::itShouldPassWith()
      """
      +-----------------------------------+--------+
      | Package name                      | dummy  |
      | Package version (current release) | 3.1.15 |
      | Package status                    | beta   |
      +-----------------------------------+--------+
      This is a dummy package
      """

  Scenario: Error if package.xml does not exist # features/pickle/validate.feature:60
    Given I am in the "empty-dir" path          # PharFeatureContext::iAmInThePath()
    When I run "pickle validate"                # PharFeatureContext::iRunPickle()
    Then it should fail with:                   # PharFeatureContext::itShouldPassWith()
      """
      The path '%%TEST_DIR%%/empty-dir' doesn't contain package.xml
      """
      string(168) 'In PackageXml.php line 62:
      
        The path '/tmp/pickle/pickle5ece087e457639.69846244/empty-dir' doesn't cont
        ain package.xml
      
      
      validate [--tmp-dir TMP-DIR] [--] [<path>]' does not contain The path '/tmp/pickle/pickle5ece087e457639.69846244/empty-dir' doesn't contain package.xml (mageekguy\atoum\asserter\exception)
    Given I am in the ".." path                 # PharFeatureContext::iAmInThePath()
    When I run "pickle validate empty-dir"      # PharFeatureContext::iRunPickle()
    Then it should fail with:                   # PharFeatureContext::itShouldPassWith()
      """
      The path 'empty-dir' doesn't contain package.xml
      """

Feature: convert PECL extensions
  In order to use pickle on PECL extensions
  As a pickle user
  I should be able to convert PECL extensions to pickle packages

  Scenario Outline: Convert downloaded extensions     # features/pecl/convert-extensions.feature:6
    Given "<extension>" <version> extension exists    # PharFeatureContext::extensionExists()
    When I run "pickle convert <extension>-<version>" # PharFeatureContext::iRunPickle()
    Then it should pass with:                         # PharFeatureContext::itShouldPassWith()
      """
      Successfully converted <extension>
      """
    And the output should contain:                    # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """
    And the output should contain:                    # PharFeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | version  |
      | APC       | 3.1.13   |
      | apcu      | 4.0.6    |
      | mongo     | 1.5.4    |
      | memcache  | 3.0.8    |
      | imagick   | 3.2.0RC1 |
      | amqp      | 1.4.0    |
      | redis     | 2.2.5    |

Feature: download and install extensions from git repository
  In order to install extensions
  As a pickle user
  I should be able to download and install extensions from git repositories

  Scenario Outline: Install extensions from git  # features/pecl/git-extension.feature:6
    Given I run "pickle install <url> --dry-run" # PharFeatureContext::iRunPickle()
    Then it should pass                          # PharFeatureContext::itShouldFail()
    And the output should contain:               # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (master)
      """
    And the output should contain:               # PharFeatureContext::theOutputShouldContain()
      """
      Cloning master
      """
    And the output should contain:               # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension |
      | git://github.com/beberlei/env.git   | env       |
      | https://github.com/beberlei/env.git | env       |
        │ Actual output:
        │ 
        │ - Installing env (master): PHP Notice:  Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1328
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Install extensions from git with version constraint # features/pecl/git-extension.feature:27
    Given I run "pickle install <url>#<version> --dry-run"              # PharFeatureContext::iRunPickle()
    Then it should pass                                                 # PharFeatureContext::itShouldFail()
    And the output should contain:                                      # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                      # PharFeatureContext::theOutputShouldContain()
      """
      Cloning <version>
      """
    And the output should contain:                                      # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension | version |
      | git://github.com/beberlei/env.git   | env       | master  |
      | https://github.com/beberlei/env.git | env       | v0.2.1  |
        │ Actual output:
        │ 
        │ - Installing env (v0.2.1): PHP Notice:  Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1328
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Show info about downloaded extensions # features/pecl/git-extension.feature:48
    Given I run "pickle info <url>"                       # PharFeatureContext::iRunPickle()
    Then it should pass                                   # PharFeatureContext::itShouldFail()
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (master)
      """
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      Cloning master
      """
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension |
      | git://github.com/beberlei/env.git   | env       |
      | https://github.com/beberlei/env.git | env       |
        │ Actual output:
        │ 
        │ - Installing env (master): PHP Notice:  Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1328
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'master')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

  Scenario Outline: Show info about extensions with version constraint # features/pecl/git-extension.feature:69
    Given I run "pickle info <url>#<version>"                          # PharFeatureContext::iRunPickle()
    Then it should pass                                                # PharFeatureContext::itShouldFail()
    And the output should contain:                                     # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                     # PharFeatureContext::theOutputShouldContain()
      """
      Cloning <version>
      """
    And the output should contain:                                     # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <extension>
      """

    Examples:
      | url                                 | extension | version |
      | git://github.com/beberlei/env.git   | env       | master  |
      | https://github.com/beberlei/env.git | env       | v0.2.1  |
        │ Actual output:
        │ 
        │ - Installing env (v0.2.1): PHP Notice:  Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos
        │ Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+DESKTOP-83AT30F+2020-05-27+1329
        │ PHP Fatal error:  Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        │ 
        │ Notice: Undefined index: home in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Config.php on line 279
        │ 
        │ Fatal error: Uncaught Error: Call to a member function getName() on null in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php:91
        │ Stack trace:
        │ #0 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(110): Composer\Util\GitHub->authorizeOAuthInteractively('github.com', 'Cloning failed ...')
        │ #1 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(276): Composer\Util\Git->runCommand(Object(Closure), 'https://github....', NULL, true)
        │ #2 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/Git.php(287): Composer\Util\Git->syncMirror('https://github....', '/cache/vcs/http...')
        │ #3 phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Downloader/GitDownloader.php(59): Composer\Util\Git->fetchRefOrSyncMirror('https://github....', '/cache/vcs/http...', 'v0.2.1')
        │ #4 pha in phar:///home/pierre/projects/php/pickle/pickle/pickle.phar/vendor/composer/composer/src/Composer/Util/GitHub.php on line 91
        integer(255) is not equal to integer(0)
        -Expected
        +Actual
        @@ -1 +1 @@
        -int(0)
        +int(255) (mageekguy\atoum\asserter\exception)

Feature: download and install PECL extensions
  In order to install PECL extensions
  As a pickle user
  I should be able to download and install PECL extensions

  Scenario Outline: Show info about downloaded extensions # features/pecl/info-extensions.feature:6
    Given I run "pickle info <extension>@<version>"       # PharFeatureContext::iRunPickle()
    Then it should pass                                   # PharFeatureContext::itShouldFail()
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                        # PharFeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | pretty   | version |
      | apc       | APC      | 3.1.13  |
      | apcu      | apcu     | 4.0.6   |
      | mongo     | mongo    | 1.5.4   |
      | memcache  | memcache | 3.0.8   |
      | amqp      | amqp     | 1.4.0   |
      | redis     | redis    | 2.2.5   |

  Scenario: Show informations about a PECL extension's options # features/pecl/info-extensions.feature:31
    When I run "pickle info apc@3.1.13"                        # PharFeatureContext::iRunPickle()
    Then it should pass                                        # PharFeatureContext::itShouldFail()
    And the output should contain:                             # PharFeatureContext::theOutputShouldContain()
      """
      | enable | whether to enable APC support            | no      |
      """
    And the output should contain:                             # PharFeatureContext::theOutputShouldContain()
      """
      | enable | Disable pthread mutex locking            | yes     |
      """
    When I run "pickle info oci8@2.0.8"                        # PharFeatureContext::iRunPickle()
    Then it should pass                                        # PharFeatureContext::itShouldFail()
    And the output should contain:                             # PharFeatureContext::theOutputShouldContain()
      """
      | with | for Oracle Database OCI8 support |         |
      """

Feature: download and install PECL extensions
  In order to install PECL extensions
  As a pickle user
  I should be able to download and install PECL extensions

  Scenario Outline: Install extensions from PECL repository # features/pecl/install-extensions.feature:6
    Given I run "pickle install <extension> --dry-run"      # PharFeatureContext::iRunPickle()
    Then it should pass                                     # PharFeatureContext::itShouldFail()
    And the output should contain:                          # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (latest-stable)
      """
    And the output should contain:                          # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """

    Examples:
      | extension | pretty   |
      | apc       | APC      |
      | apcu      | apcu     |
      | mongo     | mongo    |
      | memcache  | memcache |
      | redis     | redis    |

  Scenario Outline: Install extensions from PECL repository with version constraint # features/pecl/install-extensions.feature:26
    Given I run "pickle install <extension>@<version> --dry-run"                    # PharFeatureContext::iRunPickle()
    Then it should pass                                                             # PharFeatureContext::itShouldFail()
    And the output should contain:                                                  # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <extension> (<version>)
      """
    And the output should contain:                                                  # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                                                  # PharFeatureContext::theOutputShouldContain()
      """
      Package version (current release) | <version>
      """

    Examples:
      | extension | pretty   | version |
      | apc       | APC      | 3.1.13  |
      | apcu      | apcu     | 4.0.6   |
      | mongo     | mongo    | 1.5.4   |
      | memcache  | memcache | 3.0.8   |
      | amqp      | amqp     | 1.4.0   |
      | redis     | redis    | 2.2.5   |

  Scenario Outline: Install extensions from PECL names and stability flag # features/pecl/install-extensions.feature:51
    Given I run "pickle install <extension>-<stability> --dry-run"        # PharFeatureContext::iRunPickle()
    Then it should pass                                                   # PharFeatureContext::itShouldFail()
    And the output should contain:                                        # PharFeatureContext::theOutputShouldContain()
      """
      - Installing <name> (latest-<stability>)
      """
    And the output should contain:                                        # PharFeatureContext::theOutputShouldContain()
      """
      Package name                      | <pretty>
      """
    And the output should contain:                                        # PharFeatureContext::theOutputShouldContain()
      """
      Package status                    | <stability>
      """

    Examples:
      | extension     | name     | pretty   | stability |
      | pecl/apc      | apc      | APC      | stable    |
      | apcu          | apcu     | apcu     | beta      |
      | pecl/memcache | memcache | memcache | beta      |

--- Failed scenarios:

    features/pickle/convert-json.feature:78
    features/pickle/validate.feature:60
    features/pecl/git-extension.feature:25
    features/pecl/git-extension.feature:46
    features/pecl/git-extension.feature:67
    features/pecl/git-extension.feature:88
    features/pickle/convert-json.feature:78
    features/pickle/validate.feature:60
    features/pecl/git-extension.feature:25
    features/pecl/git-extension.feature:46
    features/pecl/git-extension.feature:67
    features/pecl/git-extension.feature:88

88 scenarios (76 passed, 12 failed)
460 steps (412 passed, 12 failed, 36 skipped)
3m29.02s (10.46Mb)
